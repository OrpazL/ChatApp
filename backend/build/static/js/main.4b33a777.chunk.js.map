{"version":3,"sources":["Components/Nav/Toolbar/Toolbar.module.scss","Components/Container/Auth/SignIn/SignIn.module.scss","App.module.scss","Components/UI/Dialog/WithDialog.module.scss","serviceWorker.ts","Modals/Enums/Paths.enum.ts","Modals/Enums/Form.enum.ts","Components/Nav/Toolbar/Toolbar.component.tsx","Components/Form/Form.ts","Components/Container/Auth/SignIn/SignIn.component.tsx","Components/UI/Dialog/WithDialog.component.tsx","App.tsx","index.tsx"],"names":["module","exports","Toolbar","ButtonContainer","Button","SignIn","TextField","App","AppHeader","Dialog","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ERoutesPath","EnumInputType","ValidationEnum","connect","dispatch","props","react","className","classes","IconButton","edge","menuButton","color","aria-label","Menu_default","a","react_router_dom","to","signIn","setFormControl","label","type","value","change","touched","valid","validation","arguments","length","undefined","list","extraFunctions","setConfig","name","placeholder","options","WrapperComponent","withRouter","onChange","e","initialState","form","username","Input","password","_React$useState","React","_React$useState2","Object","slicedToArray","values","map","control","classesArr","push","Invalid","join","inputProps","variant","react_default","createElement","Toolbar_component","react_router","path","valueOf","exact","component","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","redux","reducer","store","next","action","result","thunk","ReactDOM","render","react_redux_es","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4b33a777.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__2lecX\",\"ButtonContainer\":\"Toolbar_ButtonContainer__2B5vq\",\"Button\":\"Toolbar_Button__15LxQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SignIn\":\"SignIn_SignIn__3HIZ4\",\"TextField\":\"SignIn_TextField__1N_9r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2ocPC\",\"AppHeader\":\"App_AppHeader__2Mw__\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialog\":\"WithDialog_Dialog__2m3Vq\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export enum ERoutesPath {\r\n    signIn = '/Sign-In',\r\n    signUp = '/Sign-Up'\r\n}","export enum EnumInputType {\r\n    Input,\r\n    Textarea,\r\n    Select,\r\n    CheckBox,\r\n    AutoComplete\r\n}\r\nexport enum ValidationEnum {\r\n    required = 'required',\r\n    minLength = 'minLength',\r\n    maxLength = 'maxLength',\r\n}\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IReducers } from '../../../index';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport classes from './Toolbar.module.scss'\r\nimport { Toolbar, IconButton, Button } from '@material-ui/core';\r\nimport { ERoutesPath } from '../../../Modals/Enums/Paths.enum';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ninterface ToolbarProps extends IMapState, IMapDispatch {\r\n}\r\n\r\nconst ToolbarComponent: React.SFC<ToolbarProps> = (props) => {\r\n    return (\r\n        <Toolbar className={classes.Toolbar}>\r\n            <IconButton\r\n                edge=\"start\"\r\n                className={classes.menuButton}\r\n                color=\"inherit\"\r\n                aria-label=\"Open drawer\"\r\n            >\r\n                <MenuIcon />\r\n            </IconButton>\r\n            <div className={classes.ButtonContainer}>\r\n                <NavLink to={ERoutesPath.signIn}><Button className={classes.Button}>Sign In</Button></NavLink>\r\n\r\n            </div>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\ninterface IMapState {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: IReducers): IMapState => (\r\n    {\r\n\r\n    }\r\n)\r\ninterface IMapDispatch {\r\n\r\n}\r\nconst mapDispatchToProps = (dispatch: React.Dispatch<any>): IMapDispatch => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarComponent);","import { IAutoCompleteListItem } from '../../Modals/Interfaces/AutoComplete.interface';\r\nimport { EnumInputType } from '../../Modals/Enums/Form.enum';\r\nimport { Config, IValidation, FormControl, Option } from '../../Modals/Interfaces/Form.interface';\r\n\r\n\r\nexport const setFormControl = (label: string,\r\n    type: EnumInputType,\r\n    config: Config<any>,\r\n    value: any,\r\n    change: Function,\r\n    validation: IValidation = {},\r\n    list: IAutoCompleteListItem[] = [],\r\n    extraFunctions: any = {}): FormControl<any> => {\r\n    return {\r\n        label,\r\n        type,\r\n        config,\r\n        value,\r\n        change,\r\n        touched: false,\r\n        valid: true,\r\n        validation,\r\n        list,\r\n        extraFunctions,\r\n    }\r\n}\r\n\r\nexport const setConfig = (label: string, name: string, placeholder: string, type: any, options: Option[] = []): Config<any> => {\r\n    return {\r\n        label,\r\n        name,\r\n        options,\r\n        placeholder,\r\n        type\r\n    }\r\n}\r\n\r\nexport const checkFormValidation = (controls: FormControl<any>[]) => {\r\n    let valid = true;\r\n    controls.forEach(control => {\r\n        valid = valid && control.valid;\r\n    });\r\n    console.log(controls);\r\n    return valid;\r\n\r\n}\r\n\r\nexport const checkIfTouched = (control: FormControl<any>) => {\r\n    let touched = false;\r\n    if (control.value) {\r\n        touched = true;\r\n    }\r\n    return touched;\r\n}\r\n","\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { IReducers } from '../../../../index';\r\nimport { withDialog } from '../../../UI/Dialog/WithDialog.component';\r\nimport MaterialUIForm from 'react-material-ui-form'\r\nimport { TextField, } from '@material-ui/core';\r\nimport classes from './SignIn.module.scss';\r\nimport { FormControl } from '../../../../Modals/Interfaces/Form.interface';\r\nimport { setFormControl, setConfig } from '../../../Form/Form';\r\nimport { EnumInputType } from '../../../../Modals/Enums/Form.enum';\r\n\r\ninterface SignInProps extends IMapDispatch, IMapState, RouteComponentProps {\r\n}\r\n\r\ninterface SignInState {\r\n    form: ISignInForm,\r\n    // tempData: ITempData\r\n}\r\n\r\ninterface ITempData {\r\n    username: string,\r\n    password: string\r\n}\r\n\r\ninterface ISignInForm {\r\n    username: FormControl<string>,\r\n    password: FormControl<string>\r\n}\r\n\r\nconst USERNAME = 'Username'\r\nconst PASSWORD = 'Password'\r\n\r\nconst SignIn: React.SFC<SignInProps> = (props) => {\r\n    const onChange = (e: string) => {\r\n        debugger\r\n    }\r\n\r\n    const initialState: SignInState = {\r\n        form: {\r\n            username: setFormControl(USERNAME, EnumInputType.Input, setConfig(USERNAME, USERNAME, USERNAME, 'text'), '', onChange),\r\n            password: setFormControl(PASSWORD, EnumInputType.Input, setConfig(PASSWORD, PASSWORD, PASSWORD, 'text'), '', onChange)\r\n        },\r\n    }\r\n    const [state, setState] = React.useState(initialState)\r\n\r\n    const form = Object.values(state.form).map((control: FormControl<any>) => {\r\n        const classesArr = [classes.TextField];\r\n        if (!control.valid) {\r\n            classesArr.push(classes.Invalid)\r\n        }\r\n        return (\r\n            <TextField\r\n                className={classesArr.join(' ')}\r\n                inputProps={control.config}\r\n                value={control.value}\r\n                variant=\"outlined\"\r\n                onChange={control.change}\r\n                label={control.label}\r\n                placeholder={control.config.placeholder}\r\n            ></TextField>)\r\n    })\r\n    return (\r\n        <div className={classes.SignIn}>\r\n            {form}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface IMapState {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: IReducers): IMapState => (\r\n    {\r\n\r\n    }\r\n)\r\ninterface IMapDispatch {\r\n\r\n}\r\nconst mapDispatchToProps = (dispatch: React.Dispatch<any>): IMapDispatch => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withDialog(SignIn)));","import * as React from 'react';\r\nimport classes from './WithDialog.module.scss';\r\n\r\nexport const withDialog = (WrapperComponent: React.ComponentType<any>) => {\r\n  return (props: any) => (\r\n    <div className={classes.Dialog}>\r\n      <WrapperComponent {...props} ></WrapperComponent>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './App.module.scss'\r\nimport Toolbar from './Components/Nav/Toolbar/Toolbar.component';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport SignIn from './Components/Container/Auth/SignIn/SignIn.component';\r\nimport { ERoutesPath } from './Modals/Enums/Paths.enum';\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <div className={classes.App}>\r\n      <Toolbar></Toolbar>\r\n\r\n      <div className={classes.AppHeader}>\r\n        <Switch>\r\n          <Route path={ERoutesPath.signIn.valueOf()} exact component={SignIn} />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as redux from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// // If you want your app to work offline and load faster, you can change\r\n// // unregister() to register() below. Note this comes with some pitfalls.\r\n// // Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n\r\n\r\nexport interface IReducers {\r\n\r\n}\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || redux.compose;\r\nconst logger: any = (store: IReducers) => {\r\n    return (next: any) => {\r\n        return (action: any) => {\r\n            console.log('TCL: action', action);\r\n            const result = next(action);\r\n            console.log('TCL: const result', result);\r\n            return result;\r\n        };\r\n    };\r\n};\r\n\r\nconst reducer: redux.Reducer<IReducers> = redux.combineReducers(({\r\n    \r\n}))\r\nconst store = redux.createStore(reducer, composeEnhancers(redux.applyMiddleware(logger, thunk)))\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}